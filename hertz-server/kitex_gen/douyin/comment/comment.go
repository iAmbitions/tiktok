// Code generated by thriftgo (0.3.0). DO NOT EDIT.

package comment

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type InternalActionCommentType int64

const (
	InternalActionCommentType_ACTION_COMMENT_TYPE_UNSPECIFIED InternalActionCommentType = 0
	InternalActionCommentType_ACTION_COMMENT_TYPE_ADD         InternalActionCommentType = 1
	InternalActionCommentType_ACTION_COMMENT_TYPE_DELETE      InternalActionCommentType = 2
)

func (p InternalActionCommentType) String() string {
	switch p {
	case InternalActionCommentType_ACTION_COMMENT_TYPE_UNSPECIFIED:
		return "ACTION_COMMENT_TYPE_UNSPECIFIED"
	case InternalActionCommentType_ACTION_COMMENT_TYPE_ADD:
		return "ACTION_COMMENT_TYPE_ADD"
	case InternalActionCommentType_ACTION_COMMENT_TYPE_DELETE:
		return "ACTION_COMMENT_TYPE_DELETE"
	}
	return "<UNSET>"
}

func InternalActionCommentTypeFromString(s string) (InternalActionCommentType, error) {
	switch s {
	case "ACTION_COMMENT_TYPE_UNSPECIFIED":
		return InternalActionCommentType_ACTION_COMMENT_TYPE_UNSPECIFIED, nil
	case "ACTION_COMMENT_TYPE_ADD":
		return InternalActionCommentType_ACTION_COMMENT_TYPE_ADD, nil
	case "ACTION_COMMENT_TYPE_DELETE":
		return InternalActionCommentType_ACTION_COMMENT_TYPE_DELETE, nil
	}
	return InternalActionCommentType(0), fmt.Errorf("not a valid InternalActionCommentType string")
}

func InternalActionCommentTypePtr(v InternalActionCommentType) *InternalActionCommentType { return &v }
func (p *InternalActionCommentType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = InternalActionCommentType(result.Int64)
	return
}

func (p *InternalActionCommentType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type User struct {
	Id              int32   `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	Name            string  `thrift:"name,2" frugal:"2,default,string" json:"name"`
	FollowCount     int32   `thrift:"follow_count,3" frugal:"3,default,i32" json:"follow_count"`
	FollowerCount   int32   `thrift:"follower_count,4" frugal:"4,default,i32" json:"follower_count"`
	IsFollow        bool    `thrift:"is_follow,5" frugal:"5,default,bool" json:"is_follow"`
	Avatar          *string `thrift:"avatar,6,optional" frugal:"6,optional,string" json:"avatar,omitempty"`
	BackgroundImage *string `thrift:"background_image,7,optional" frugal:"7,optional,string" json:"background_image,omitempty"`
	Signature       *string `thrift:"signature,8,optional" frugal:"8,optional,string" json:"signature,omitempty"`
	TotalFavorited  *int32  `thrift:"total_favorited,9,optional" frugal:"9,optional,i32" json:"total_favorited,omitempty"`
	WorkCount       *int32  `thrift:"work_count,10,optional" frugal:"10,optional,i32" json:"work_count,omitempty"`
	FavoriteCount   *int32  `thrift:"favorite_count,11,optional" frugal:"11,optional,i32" json:"favorite_count,omitempty"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
	*p = User{}
}

func (p *User) GetId() (v int32) {
	return p.Id
}

func (p *User) GetName() (v string) {
	return p.Name
}

func (p *User) GetFollowCount() (v int32) {
	return p.FollowCount
}

func (p *User) GetFollowerCount() (v int32) {
	return p.FollowerCount
}

func (p *User) GetIsFollow() (v bool) {
	return p.IsFollow
}

var User_Avatar_DEFAULT string

func (p *User) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return User_Avatar_DEFAULT
	}
	return *p.Avatar
}

var User_BackgroundImage_DEFAULT string

func (p *User) GetBackgroundImage() (v string) {
	if !p.IsSetBackgroundImage() {
		return User_BackgroundImage_DEFAULT
	}
	return *p.BackgroundImage
}

var User_Signature_DEFAULT string

func (p *User) GetSignature() (v string) {
	if !p.IsSetSignature() {
		return User_Signature_DEFAULT
	}
	return *p.Signature
}

var User_TotalFavorited_DEFAULT int32

func (p *User) GetTotalFavorited() (v int32) {
	if !p.IsSetTotalFavorited() {
		return User_TotalFavorited_DEFAULT
	}
	return *p.TotalFavorited
}

var User_WorkCount_DEFAULT int32

func (p *User) GetWorkCount() (v int32) {
	if !p.IsSetWorkCount() {
		return User_WorkCount_DEFAULT
	}
	return *p.WorkCount
}

var User_FavoriteCount_DEFAULT int32

func (p *User) GetFavoriteCount() (v int32) {
	if !p.IsSetFavoriteCount() {
		return User_FavoriteCount_DEFAULT
	}
	return *p.FavoriteCount
}
func (p *User) SetId(val int32) {
	p.Id = val
}
func (p *User) SetName(val string) {
	p.Name = val
}
func (p *User) SetFollowCount(val int32) {
	p.FollowCount = val
}
func (p *User) SetFollowerCount(val int32) {
	p.FollowerCount = val
}
func (p *User) SetIsFollow(val bool) {
	p.IsFollow = val
}
func (p *User) SetAvatar(val *string) {
	p.Avatar = val
}
func (p *User) SetBackgroundImage(val *string) {
	p.BackgroundImage = val
}
func (p *User) SetSignature(val *string) {
	p.Signature = val
}
func (p *User) SetTotalFavorited(val *int32) {
	p.TotalFavorited = val
}
func (p *User) SetWorkCount(val *int32) {
	p.WorkCount = val
}
func (p *User) SetFavoriteCount(val *int32) {
	p.FavoriteCount = val
}

var fieldIDToName_User = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "follow_count",
	4:  "follower_count",
	5:  "is_follow",
	6:  "avatar",
	7:  "background_image",
	8:  "signature",
	9:  "total_favorited",
	10: "work_count",
	11: "favorite_count",
}

func (p *User) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *User) IsSetBackgroundImage() bool {
	return p.BackgroundImage != nil
}

func (p *User) IsSetSignature() bool {
	return p.Signature != nil
}

func (p *User) IsSetTotalFavorited() bool {
	return p.TotalFavorited != nil
}

func (p *User) IsSetWorkCount() bool {
	return p.WorkCount != nil
}

func (p *User) IsSetFavoriteCount() bool {
	return p.FavoriteCount != nil
}

func (p *User) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_User[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *User) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *User) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *User) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.FollowCount = v
	}
	return nil
}

func (p *User) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.FollowerCount = v
	}
	return nil
}

func (p *User) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFollow = v
	}
	return nil
}

func (p *User) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Avatar = &v
	}
	return nil
}

func (p *User) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BackgroundImage = &v
	}
	return nil
}

func (p *User) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Signature = &v
	}
	return nil
}

func (p *User) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalFavorited = &v
	}
	return nil
}

func (p *User) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.WorkCount = &v
	}
	return nil
}

func (p *User) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.FavoriteCount = &v
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("User"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("follow_count", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.FollowCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("follower_count", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.FollowerCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *User) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_follow", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsFollow); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Avatar); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *User) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackgroundImage() {
		if err = oprot.WriteFieldBegin("background_image", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BackgroundImage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *User) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignature() {
		if err = oprot.WriteFieldBegin("signature", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Signature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *User) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalFavorited() {
		if err = oprot.WriteFieldBegin("total_favorited", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TotalFavorited); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *User) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkCount() {
		if err = oprot.WriteFieldBegin("work_count", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.WorkCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *User) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetFavoriteCount() {
		if err = oprot.WriteFieldBegin("favorite_count", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FavoriteCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

func (p *User) DeepEqual(ano *User) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.FollowCount) {
		return false
	}
	if !p.Field4DeepEqual(ano.FollowerCount) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsFollow) {
		return false
	}
	if !p.Field6DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field7DeepEqual(ano.BackgroundImage) {
		return false
	}
	if !p.Field8DeepEqual(ano.Signature) {
		return false
	}
	if !p.Field9DeepEqual(ano.TotalFavorited) {
		return false
	}
	if !p.Field10DeepEqual(ano.WorkCount) {
		return false
	}
	if !p.Field11DeepEqual(ano.FavoriteCount) {
		return false
	}
	return true
}

func (p *User) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *User) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *User) Field3DeepEqual(src int32) bool {

	if p.FollowCount != src {
		return false
	}
	return true
}
func (p *User) Field4DeepEqual(src int32) bool {

	if p.FollowerCount != src {
		return false
	}
	return true
}
func (p *User) Field5DeepEqual(src bool) bool {

	if p.IsFollow != src {
		return false
	}
	return true
}
func (p *User) Field6DeepEqual(src *string) bool {

	if p.Avatar == src {
		return true
	} else if p.Avatar == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Avatar, *src) != 0 {
		return false
	}
	return true
}
func (p *User) Field7DeepEqual(src *string) bool {

	if p.BackgroundImage == src {
		return true
	} else if p.BackgroundImage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BackgroundImage, *src) != 0 {
		return false
	}
	return true
}
func (p *User) Field8DeepEqual(src *string) bool {

	if p.Signature == src {
		return true
	} else if p.Signature == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Signature, *src) != 0 {
		return false
	}
	return true
}
func (p *User) Field9DeepEqual(src *int32) bool {

	if p.TotalFavorited == src {
		return true
	} else if p.TotalFavorited == nil || src == nil {
		return false
	}
	if *p.TotalFavorited != *src {
		return false
	}
	return true
}
func (p *User) Field10DeepEqual(src *int32) bool {

	if p.WorkCount == src {
		return true
	} else if p.WorkCount == nil || src == nil {
		return false
	}
	if *p.WorkCount != *src {
		return false
	}
	return true
}
func (p *User) Field11DeepEqual(src *int32) bool {

	if p.FavoriteCount == src {
		return true
	} else if p.FavoriteCount == nil || src == nil {
		return false
	}
	if *p.FavoriteCount != *src {
		return false
	}
	return true
}

type InternalComment struct {
	Id         int32  `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	UserId     int32  `thrift:"user_id,2" frugal:"2,default,i32" json:"user_id"`
	Content    string `thrift:"content,3" frugal:"3,default,string" json:"content"`
	CreateDate string `thrift:"create_date,4" frugal:"4,default,string" json:"create_date"`
}

func NewInternalComment() *InternalComment {
	return &InternalComment{}
}

func (p *InternalComment) InitDefault() {
	*p = InternalComment{}
}

func (p *InternalComment) GetId() (v int32) {
	return p.Id
}

func (p *InternalComment) GetUserId() (v int32) {
	return p.UserId
}

func (p *InternalComment) GetContent() (v string) {
	return p.Content
}

func (p *InternalComment) GetCreateDate() (v string) {
	return p.CreateDate
}
func (p *InternalComment) SetId(val int32) {
	p.Id = val
}
func (p *InternalComment) SetUserId(val int32) {
	p.UserId = val
}
func (p *InternalComment) SetContent(val string) {
	p.Content = val
}
func (p *InternalComment) SetCreateDate(val string) {
	p.CreateDate = val
}

var fieldIDToName_InternalComment = map[int16]string{
	1: "id",
	2: "user_id",
	3: "content",
	4: "create_date",
}

func (p *InternalComment) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalComment[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalComment) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *InternalComment) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *InternalComment) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}

func (p *InternalComment) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateDate = v
	}
	return nil
}

func (p *InternalComment) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalComment"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalComment) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalComment) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InternalComment) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *InternalComment) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("create_date", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *InternalComment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalComment(%+v)", *p)
}

func (p *InternalComment) DeepEqual(ano *InternalComment) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreateDate) {
		return false
	}
	return true
}

func (p *InternalComment) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *InternalComment) Field2DeepEqual(src int32) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *InternalComment) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *InternalComment) Field4DeepEqual(src string) bool {

	if strings.Compare(p.CreateDate, src) != 0 {
		return false
	}
	return true
}

type InternalActionCommentRequest struct {
	UserId      int32                     `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	VideoId     int32                     `thrift:"video_id,2" frugal:"2,default,i32" json:"video_id"`
	ActionType  InternalActionCommentType `thrift:"action_type,3" frugal:"3,default,InternalActionCommentType" json:"action_type"`
	CommentText *string                   `thrift:"comment_text,4,optional" frugal:"4,optional,string" json:"comment_text,omitempty"`
	CommentId   *int32                    `thrift:"comment_id,5,optional" frugal:"5,optional,i32" json:"comment_id,omitempty"`
}

func NewInternalActionCommentRequest() *InternalActionCommentRequest {
	return &InternalActionCommentRequest{}
}

func (p *InternalActionCommentRequest) InitDefault() {
	*p = InternalActionCommentRequest{}
}

func (p *InternalActionCommentRequest) GetUserId() (v int32) {
	return p.UserId
}

func (p *InternalActionCommentRequest) GetVideoId() (v int32) {
	return p.VideoId
}

func (p *InternalActionCommentRequest) GetActionType() (v InternalActionCommentType) {
	return p.ActionType
}

var InternalActionCommentRequest_CommentText_DEFAULT string

func (p *InternalActionCommentRequest) GetCommentText() (v string) {
	if !p.IsSetCommentText() {
		return InternalActionCommentRequest_CommentText_DEFAULT
	}
	return *p.CommentText
}

var InternalActionCommentRequest_CommentId_DEFAULT int32

func (p *InternalActionCommentRequest) GetCommentId() (v int32) {
	if !p.IsSetCommentId() {
		return InternalActionCommentRequest_CommentId_DEFAULT
	}
	return *p.CommentId
}
func (p *InternalActionCommentRequest) SetUserId(val int32) {
	p.UserId = val
}
func (p *InternalActionCommentRequest) SetVideoId(val int32) {
	p.VideoId = val
}
func (p *InternalActionCommentRequest) SetActionType(val InternalActionCommentType) {
	p.ActionType = val
}
func (p *InternalActionCommentRequest) SetCommentText(val *string) {
	p.CommentText = val
}
func (p *InternalActionCommentRequest) SetCommentId(val *int32) {
	p.CommentId = val
}

var fieldIDToName_InternalActionCommentRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "action_type",
	4: "comment_text",
	5: "comment_id",
}

func (p *InternalActionCommentRequest) IsSetCommentText() bool {
	return p.CommentText != nil
}

func (p *InternalActionCommentRequest) IsSetCommentId() bool {
	return p.CommentId != nil
}

func (p *InternalActionCommentRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalActionCommentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalActionCommentRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *InternalActionCommentRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *InternalActionCommentRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ActionType = InternalActionCommentType(v)
	}
	return nil
}

func (p *InternalActionCommentRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CommentText = &v
	}
	return nil
}

func (p *InternalActionCommentRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CommentId = &v
	}
	return nil
}

func (p *InternalActionCommentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalActionCommentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalActionCommentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalActionCommentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InternalActionCommentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("action_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ActionType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *InternalActionCommentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentText() {
		if err = oprot.WriteFieldBegin("comment_text", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CommentText); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *InternalActionCommentRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentId() {
		if err = oprot.WriteFieldBegin("comment_id", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.CommentId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *InternalActionCommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalActionCommentRequest(%+v)", *p)
}

func (p *InternalActionCommentRequest) DeepEqual(ano *InternalActionCommentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ActionType) {
		return false
	}
	if !p.Field4DeepEqual(ano.CommentText) {
		return false
	}
	if !p.Field5DeepEqual(ano.CommentId) {
		return false
	}
	return true
}

func (p *InternalActionCommentRequest) Field1DeepEqual(src int32) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *InternalActionCommentRequest) Field2DeepEqual(src int32) bool {

	if p.VideoId != src {
		return false
	}
	return true
}
func (p *InternalActionCommentRequest) Field3DeepEqual(src InternalActionCommentType) bool {

	if p.ActionType != src {
		return false
	}
	return true
}
func (p *InternalActionCommentRequest) Field4DeepEqual(src *string) bool {

	if p.CommentText == src {
		return true
	} else if p.CommentText == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CommentText, *src) != 0 {
		return false
	}
	return true
}
func (p *InternalActionCommentRequest) Field5DeepEqual(src *int32) bool {

	if p.CommentId == src {
		return true
	} else if p.CommentId == nil || src == nil {
		return false
	}
	if *p.CommentId != *src {
		return false
	}
	return true
}

type InternalActionCommentResponse struct {
	StatusCode int32            `thrift:"status_code,1" frugal:"1,default,i32" json:"status_code"`
	StatusMsg  string           `thrift:"status_msg,2" frugal:"2,default,string" json:"status_msg"`
	Comment    *InternalComment `thrift:"comment,3" frugal:"3,default,InternalComment" json:"comment"`
}

func NewInternalActionCommentResponse() *InternalActionCommentResponse {
	return &InternalActionCommentResponse{}
}

func (p *InternalActionCommentResponse) InitDefault() {
	*p = InternalActionCommentResponse{}
}

func (p *InternalActionCommentResponse) GetStatusCode() (v int32) {
	return p.StatusCode
}

func (p *InternalActionCommentResponse) GetStatusMsg() (v string) {
	return p.StatusMsg
}

var InternalActionCommentResponse_Comment_DEFAULT *InternalComment

func (p *InternalActionCommentResponse) GetComment() (v *InternalComment) {
	if !p.IsSetComment() {
		return InternalActionCommentResponse_Comment_DEFAULT
	}
	return p.Comment
}
func (p *InternalActionCommentResponse) SetStatusCode(val int32) {
	p.StatusCode = val
}
func (p *InternalActionCommentResponse) SetStatusMsg(val string) {
	p.StatusMsg = val
}
func (p *InternalActionCommentResponse) SetComment(val *InternalComment) {
	p.Comment = val
}

var fieldIDToName_InternalActionCommentResponse = map[int16]string{
	1: "status_code",
	2: "status_msg",
	3: "comment",
}

func (p *InternalActionCommentResponse) IsSetComment() bool {
	return p.Comment != nil
}

func (p *InternalActionCommentResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalActionCommentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalActionCommentResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.StatusCode = v
	}
	return nil
}

func (p *InternalActionCommentResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StatusMsg = v
	}
	return nil
}

func (p *InternalActionCommentResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Comment = NewInternalComment()
	if err := p.Comment.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InternalActionCommentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalActionCommentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalActionCommentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status_code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StatusCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalActionCommentResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status_msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StatusMsg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InternalActionCommentResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comment", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Comment.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *InternalActionCommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalActionCommentResponse(%+v)", *p)
}

func (p *InternalActionCommentResponse) DeepEqual(ano *InternalActionCommentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StatusCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.StatusMsg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Comment) {
		return false
	}
	return true
}

func (p *InternalActionCommentResponse) Field1DeepEqual(src int32) bool {

	if p.StatusCode != src {
		return false
	}
	return true
}
func (p *InternalActionCommentResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.StatusMsg, src) != 0 {
		return false
	}
	return true
}
func (p *InternalActionCommentResponse) Field3DeepEqual(src *InternalComment) bool {

	if !p.Comment.DeepEqual(src) {
		return false
	}
	return true
}

type InternalListCommentRequest struct {
	UserId  int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	VideoId int32 `thrift:"video_id,2" frugal:"2,default,i32" json:"video_id"`
}

func NewInternalListCommentRequest() *InternalListCommentRequest {
	return &InternalListCommentRequest{}
}

func (p *InternalListCommentRequest) InitDefault() {
	*p = InternalListCommentRequest{}
}

func (p *InternalListCommentRequest) GetUserId() (v int32) {
	return p.UserId
}

func (p *InternalListCommentRequest) GetVideoId() (v int32) {
	return p.VideoId
}
func (p *InternalListCommentRequest) SetUserId(val int32) {
	p.UserId = val
}
func (p *InternalListCommentRequest) SetVideoId(val int32) {
	p.VideoId = val
}

var fieldIDToName_InternalListCommentRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
}

func (p *InternalListCommentRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalListCommentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalListCommentRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *InternalListCommentRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *InternalListCommentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalListCommentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalListCommentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalListCommentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InternalListCommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalListCommentRequest(%+v)", *p)
}

func (p *InternalListCommentRequest) DeepEqual(ano *InternalListCommentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoId) {
		return false
	}
	return true
}

func (p *InternalListCommentRequest) Field1DeepEqual(src int32) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *InternalListCommentRequest) Field2DeepEqual(src int32) bool {

	if p.VideoId != src {
		return false
	}
	return true
}

type InternalListCommentResponse struct {
	StatusCode  int32              `thrift:"status_code,1" frugal:"1,default,i32" json:"status_code"`
	StatusMsg   string             `thrift:"status_msg,2" frugal:"2,default,string" json:"status_msg"`
	CommentList []*InternalComment `thrift:"comment_list,3" frugal:"3,default,list<InternalComment>" json:"comment_list"`
}

func NewInternalListCommentResponse() *InternalListCommentResponse {
	return &InternalListCommentResponse{}
}

func (p *InternalListCommentResponse) InitDefault() {
	*p = InternalListCommentResponse{}
}

func (p *InternalListCommentResponse) GetStatusCode() (v int32) {
	return p.StatusCode
}

func (p *InternalListCommentResponse) GetStatusMsg() (v string) {
	return p.StatusMsg
}

func (p *InternalListCommentResponse) GetCommentList() (v []*InternalComment) {
	return p.CommentList
}
func (p *InternalListCommentResponse) SetStatusCode(val int32) {
	p.StatusCode = val
}
func (p *InternalListCommentResponse) SetStatusMsg(val string) {
	p.StatusMsg = val
}
func (p *InternalListCommentResponse) SetCommentList(val []*InternalComment) {
	p.CommentList = val
}

var fieldIDToName_InternalListCommentResponse = map[int16]string{
	1: "status_code",
	2: "status_msg",
	3: "comment_list",
}

func (p *InternalListCommentResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalListCommentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalListCommentResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.StatusCode = v
	}
	return nil
}

func (p *InternalListCommentResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StatusMsg = v
	}
	return nil
}

func (p *InternalListCommentResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CommentList = make([]*InternalComment, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewInternalComment()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.CommentList = append(p.CommentList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *InternalListCommentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalListCommentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalListCommentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status_code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StatusCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalListCommentResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status_msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StatusMsg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InternalListCommentResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comment_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CommentList)); err != nil {
		return err
	}
	for _, v := range p.CommentList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *InternalListCommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalListCommentResponse(%+v)", *p)
}

func (p *InternalListCommentResponse) DeepEqual(ano *InternalListCommentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StatusCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.StatusMsg) {
		return false
	}
	if !p.Field3DeepEqual(ano.CommentList) {
		return false
	}
	return true
}

func (p *InternalListCommentResponse) Field1DeepEqual(src int32) bool {

	if p.StatusCode != src {
		return false
	}
	return true
}
func (p *InternalListCommentResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.StatusMsg, src) != 0 {
		return false
	}
	return true
}
func (p *InternalListCommentResponse) Field3DeepEqual(src []*InternalComment) bool {

	if len(p.CommentList) != len(src) {
		return false
	}
	for i, v := range p.CommentList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type InternalCountCommentRequest struct {
	ActorId int32 `thrift:"actor_id,1" frugal:"1,default,i32" json:"actor_id"`
	VideoId int32 `thrift:"video_id,2" frugal:"2,default,i32" json:"video_id"`
}

func NewInternalCountCommentRequest() *InternalCountCommentRequest {
	return &InternalCountCommentRequest{}
}

func (p *InternalCountCommentRequest) InitDefault() {
	*p = InternalCountCommentRequest{}
}

func (p *InternalCountCommentRequest) GetActorId() (v int32) {
	return p.ActorId
}

func (p *InternalCountCommentRequest) GetVideoId() (v int32) {
	return p.VideoId
}
func (p *InternalCountCommentRequest) SetActorId(val int32) {
	p.ActorId = val
}
func (p *InternalCountCommentRequest) SetVideoId(val int32) {
	p.VideoId = val
}

var fieldIDToName_InternalCountCommentRequest = map[int16]string{
	1: "actor_id",
	2: "video_id",
}

func (p *InternalCountCommentRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalCountCommentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalCountCommentRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ActorId = v
	}
	return nil
}

func (p *InternalCountCommentRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *InternalCountCommentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalCountCommentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalCountCommentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("actor_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ActorId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalCountCommentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InternalCountCommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalCountCommentRequest(%+v)", *p)
}

func (p *InternalCountCommentRequest) DeepEqual(ano *InternalCountCommentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ActorId) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoId) {
		return false
	}
	return true
}

func (p *InternalCountCommentRequest) Field1DeepEqual(src int32) bool {

	if p.ActorId != src {
		return false
	}
	return true
}
func (p *InternalCountCommentRequest) Field2DeepEqual(src int32) bool {

	if p.VideoId != src {
		return false
	}
	return true
}

type InternalCountCommentResponse struct {
	StatusCode   int32   `thrift:"status_code,1" frugal:"1,default,i32" json:"status_code"`
	StatusMsg    *string `thrift:"status_msg,2,optional" frugal:"2,optional,string" json:"status_msg,omitempty"`
	CommentCount int32   `thrift:"comment_count,3" frugal:"3,default,i32" json:"comment_count"`
}

func NewInternalCountCommentResponse() *InternalCountCommentResponse {
	return &InternalCountCommentResponse{}
}

func (p *InternalCountCommentResponse) InitDefault() {
	*p = InternalCountCommentResponse{}
}

func (p *InternalCountCommentResponse) GetStatusCode() (v int32) {
	return p.StatusCode
}

var InternalCountCommentResponse_StatusMsg_DEFAULT string

func (p *InternalCountCommentResponse) GetStatusMsg() (v string) {
	if !p.IsSetStatusMsg() {
		return InternalCountCommentResponse_StatusMsg_DEFAULT
	}
	return *p.StatusMsg
}

func (p *InternalCountCommentResponse) GetCommentCount() (v int32) {
	return p.CommentCount
}
func (p *InternalCountCommentResponse) SetStatusCode(val int32) {
	p.StatusCode = val
}
func (p *InternalCountCommentResponse) SetStatusMsg(val *string) {
	p.StatusMsg = val
}
func (p *InternalCountCommentResponse) SetCommentCount(val int32) {
	p.CommentCount = val
}

var fieldIDToName_InternalCountCommentResponse = map[int16]string{
	1: "status_code",
	2: "status_msg",
	3: "comment_count",
}

func (p *InternalCountCommentResponse) IsSetStatusMsg() bool {
	return p.StatusMsg != nil
}

func (p *InternalCountCommentResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalCountCommentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalCountCommentResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.StatusCode = v
	}
	return nil
}

func (p *InternalCountCommentResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StatusMsg = &v
	}
	return nil
}

func (p *InternalCountCommentResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CommentCount = v
	}
	return nil
}

func (p *InternalCountCommentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalCountCommentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalCountCommentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status_code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StatusCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalCountCommentResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusMsg() {
		if err = oprot.WriteFieldBegin("status_msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StatusMsg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InternalCountCommentResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comment_count", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CommentCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *InternalCountCommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalCountCommentResponse(%+v)", *p)
}

func (p *InternalCountCommentResponse) DeepEqual(ano *InternalCountCommentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StatusCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.StatusMsg) {
		return false
	}
	if !p.Field3DeepEqual(ano.CommentCount) {
		return false
	}
	return true
}

func (p *InternalCountCommentResponse) Field1DeepEqual(src int32) bool {

	if p.StatusCode != src {
		return false
	}
	return true
}
func (p *InternalCountCommentResponse) Field2DeepEqual(src *string) bool {

	if p.StatusMsg == src {
		return true
	} else if p.StatusMsg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StatusMsg, *src) != 0 {
		return false
	}
	return true
}
func (p *InternalCountCommentResponse) Field3DeepEqual(src int32) bool {

	if p.CommentCount != src {
		return false
	}
	return true
}

type InternalCommentService interface {
	InternalActionComment(ctx context.Context, request *InternalActionCommentRequest) (r *InternalActionCommentResponse, err error)

	InternalListComment(ctx context.Context, request *InternalListCommentRequest) (r *InternalListCommentResponse, err error)

	InternalCountComment(ctx context.Context, request *InternalCountCommentRequest) (r *InternalCountCommentResponse, err error)
}

type InternalCommentServiceClient struct {
	c thrift.TClient
}

func NewInternalCommentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *InternalCommentServiceClient {
	return &InternalCommentServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewInternalCommentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *InternalCommentServiceClient {
	return &InternalCommentServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewInternalCommentServiceClient(c thrift.TClient) *InternalCommentServiceClient {
	return &InternalCommentServiceClient{
		c: c,
	}
}

func (p *InternalCommentServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *InternalCommentServiceClient) InternalActionComment(ctx context.Context, request *InternalActionCommentRequest) (r *InternalActionCommentResponse, err error) {
	var _args InternalCommentServiceInternalActionCommentArgs
	_args.Request = request
	var _result InternalCommentServiceInternalActionCommentResult
	if err = p.Client_().Call(ctx, "InternalActionComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *InternalCommentServiceClient) InternalListComment(ctx context.Context, request *InternalListCommentRequest) (r *InternalListCommentResponse, err error) {
	var _args InternalCommentServiceInternalListCommentArgs
	_args.Request = request
	var _result InternalCommentServiceInternalListCommentResult
	if err = p.Client_().Call(ctx, "InternalListComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *InternalCommentServiceClient) InternalCountComment(ctx context.Context, request *InternalCountCommentRequest) (r *InternalCountCommentResponse, err error) {
	var _args InternalCommentServiceInternalCountCommentArgs
	_args.Request = request
	var _result InternalCommentServiceInternalCountCommentResult
	if err = p.Client_().Call(ctx, "InternalCountComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type InternalCommentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      InternalCommentService
}

func (p *InternalCommentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *InternalCommentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *InternalCommentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewInternalCommentServiceProcessor(handler InternalCommentService) *InternalCommentServiceProcessor {
	self := &InternalCommentServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("InternalActionComment", &internalCommentServiceProcessorInternalActionComment{handler: handler})
	self.AddToProcessorMap("InternalListComment", &internalCommentServiceProcessorInternalListComment{handler: handler})
	self.AddToProcessorMap("InternalCountComment", &internalCommentServiceProcessorInternalCountComment{handler: handler})
	return self
}
func (p *InternalCommentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type internalCommentServiceProcessorInternalActionComment struct {
	handler InternalCommentService
}

func (p *internalCommentServiceProcessorInternalActionComment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InternalCommentServiceInternalActionCommentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("InternalActionComment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := InternalCommentServiceInternalActionCommentResult{}
	var retval *InternalActionCommentResponse
	if retval, err2 = p.handler.InternalActionComment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InternalActionComment: "+err2.Error())
		oprot.WriteMessageBegin("InternalActionComment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("InternalActionComment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type internalCommentServiceProcessorInternalListComment struct {
	handler InternalCommentService
}

func (p *internalCommentServiceProcessorInternalListComment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InternalCommentServiceInternalListCommentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("InternalListComment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := InternalCommentServiceInternalListCommentResult{}
	var retval *InternalListCommentResponse
	if retval, err2 = p.handler.InternalListComment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InternalListComment: "+err2.Error())
		oprot.WriteMessageBegin("InternalListComment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("InternalListComment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type internalCommentServiceProcessorInternalCountComment struct {
	handler InternalCommentService
}

func (p *internalCommentServiceProcessorInternalCountComment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InternalCommentServiceInternalCountCommentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("InternalCountComment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := InternalCommentServiceInternalCountCommentResult{}
	var retval *InternalCountCommentResponse
	if retval, err2 = p.handler.InternalCountComment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InternalCountComment: "+err2.Error())
		oprot.WriteMessageBegin("InternalCountComment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("InternalCountComment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type InternalCommentServiceInternalActionCommentArgs struct {
	Request *InternalActionCommentRequest `thrift:"request,1" frugal:"1,default,InternalActionCommentRequest" json:"request"`
}

func NewInternalCommentServiceInternalActionCommentArgs() *InternalCommentServiceInternalActionCommentArgs {
	return &InternalCommentServiceInternalActionCommentArgs{}
}

func (p *InternalCommentServiceInternalActionCommentArgs) InitDefault() {
	*p = InternalCommentServiceInternalActionCommentArgs{}
}

var InternalCommentServiceInternalActionCommentArgs_Request_DEFAULT *InternalActionCommentRequest

func (p *InternalCommentServiceInternalActionCommentArgs) GetRequest() (v *InternalActionCommentRequest) {
	if !p.IsSetRequest() {
		return InternalCommentServiceInternalActionCommentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *InternalCommentServiceInternalActionCommentArgs) SetRequest(val *InternalActionCommentRequest) {
	p.Request = val
}

var fieldIDToName_InternalCommentServiceInternalActionCommentArgs = map[int16]string{
	1: "request",
}

func (p *InternalCommentServiceInternalActionCommentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *InternalCommentServiceInternalActionCommentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalCommentServiceInternalActionCommentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalActionCommentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewInternalActionCommentRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InternalCommentServiceInternalActionCommentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalActionComment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalActionCommentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalCommentServiceInternalActionCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalCommentServiceInternalActionCommentArgs(%+v)", *p)
}

func (p *InternalCommentServiceInternalActionCommentArgs) DeepEqual(ano *InternalCommentServiceInternalActionCommentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *InternalCommentServiceInternalActionCommentArgs) Field1DeepEqual(src *InternalActionCommentRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type InternalCommentServiceInternalActionCommentResult struct {
	Success *InternalActionCommentResponse `thrift:"success,0,optional" frugal:"0,optional,InternalActionCommentResponse" json:"success,omitempty"`
}

func NewInternalCommentServiceInternalActionCommentResult() *InternalCommentServiceInternalActionCommentResult {
	return &InternalCommentServiceInternalActionCommentResult{}
}

func (p *InternalCommentServiceInternalActionCommentResult) InitDefault() {
	*p = InternalCommentServiceInternalActionCommentResult{}
}

var InternalCommentServiceInternalActionCommentResult_Success_DEFAULT *InternalActionCommentResponse

func (p *InternalCommentServiceInternalActionCommentResult) GetSuccess() (v *InternalActionCommentResponse) {
	if !p.IsSetSuccess() {
		return InternalCommentServiceInternalActionCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InternalCommentServiceInternalActionCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*InternalActionCommentResponse)
}

var fieldIDToName_InternalCommentServiceInternalActionCommentResult = map[int16]string{
	0: "success",
}

func (p *InternalCommentServiceInternalActionCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InternalCommentServiceInternalActionCommentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalCommentServiceInternalActionCommentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalActionCommentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewInternalActionCommentResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InternalCommentServiceInternalActionCommentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalActionComment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalActionCommentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InternalCommentServiceInternalActionCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalCommentServiceInternalActionCommentResult(%+v)", *p)
}

func (p *InternalCommentServiceInternalActionCommentResult) DeepEqual(ano *InternalCommentServiceInternalActionCommentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InternalCommentServiceInternalActionCommentResult) Field0DeepEqual(src *InternalActionCommentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InternalCommentServiceInternalListCommentArgs struct {
	Request *InternalListCommentRequest `thrift:"request,1" frugal:"1,default,InternalListCommentRequest" json:"request"`
}

func NewInternalCommentServiceInternalListCommentArgs() *InternalCommentServiceInternalListCommentArgs {
	return &InternalCommentServiceInternalListCommentArgs{}
}

func (p *InternalCommentServiceInternalListCommentArgs) InitDefault() {
	*p = InternalCommentServiceInternalListCommentArgs{}
}

var InternalCommentServiceInternalListCommentArgs_Request_DEFAULT *InternalListCommentRequest

func (p *InternalCommentServiceInternalListCommentArgs) GetRequest() (v *InternalListCommentRequest) {
	if !p.IsSetRequest() {
		return InternalCommentServiceInternalListCommentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *InternalCommentServiceInternalListCommentArgs) SetRequest(val *InternalListCommentRequest) {
	p.Request = val
}

var fieldIDToName_InternalCommentServiceInternalListCommentArgs = map[int16]string{
	1: "request",
}

func (p *InternalCommentServiceInternalListCommentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *InternalCommentServiceInternalListCommentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalCommentServiceInternalListCommentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalListCommentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewInternalListCommentRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InternalCommentServiceInternalListCommentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalListComment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalListCommentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalCommentServiceInternalListCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalCommentServiceInternalListCommentArgs(%+v)", *p)
}

func (p *InternalCommentServiceInternalListCommentArgs) DeepEqual(ano *InternalCommentServiceInternalListCommentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *InternalCommentServiceInternalListCommentArgs) Field1DeepEqual(src *InternalListCommentRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type InternalCommentServiceInternalListCommentResult struct {
	Success *InternalListCommentResponse `thrift:"success,0,optional" frugal:"0,optional,InternalListCommentResponse" json:"success,omitempty"`
}

func NewInternalCommentServiceInternalListCommentResult() *InternalCommentServiceInternalListCommentResult {
	return &InternalCommentServiceInternalListCommentResult{}
}

func (p *InternalCommentServiceInternalListCommentResult) InitDefault() {
	*p = InternalCommentServiceInternalListCommentResult{}
}

var InternalCommentServiceInternalListCommentResult_Success_DEFAULT *InternalListCommentResponse

func (p *InternalCommentServiceInternalListCommentResult) GetSuccess() (v *InternalListCommentResponse) {
	if !p.IsSetSuccess() {
		return InternalCommentServiceInternalListCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InternalCommentServiceInternalListCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*InternalListCommentResponse)
}

var fieldIDToName_InternalCommentServiceInternalListCommentResult = map[int16]string{
	0: "success",
}

func (p *InternalCommentServiceInternalListCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InternalCommentServiceInternalListCommentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalCommentServiceInternalListCommentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalListCommentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewInternalListCommentResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InternalCommentServiceInternalListCommentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalListComment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalListCommentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InternalCommentServiceInternalListCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalCommentServiceInternalListCommentResult(%+v)", *p)
}

func (p *InternalCommentServiceInternalListCommentResult) DeepEqual(ano *InternalCommentServiceInternalListCommentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InternalCommentServiceInternalListCommentResult) Field0DeepEqual(src *InternalListCommentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InternalCommentServiceInternalCountCommentArgs struct {
	Request *InternalCountCommentRequest `thrift:"request,1" frugal:"1,default,InternalCountCommentRequest" json:"request"`
}

func NewInternalCommentServiceInternalCountCommentArgs() *InternalCommentServiceInternalCountCommentArgs {
	return &InternalCommentServiceInternalCountCommentArgs{}
}

func (p *InternalCommentServiceInternalCountCommentArgs) InitDefault() {
	*p = InternalCommentServiceInternalCountCommentArgs{}
}

var InternalCommentServiceInternalCountCommentArgs_Request_DEFAULT *InternalCountCommentRequest

func (p *InternalCommentServiceInternalCountCommentArgs) GetRequest() (v *InternalCountCommentRequest) {
	if !p.IsSetRequest() {
		return InternalCommentServiceInternalCountCommentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *InternalCommentServiceInternalCountCommentArgs) SetRequest(val *InternalCountCommentRequest) {
	p.Request = val
}

var fieldIDToName_InternalCommentServiceInternalCountCommentArgs = map[int16]string{
	1: "request",
}

func (p *InternalCommentServiceInternalCountCommentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *InternalCommentServiceInternalCountCommentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalCommentServiceInternalCountCommentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalCountCommentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewInternalCountCommentRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InternalCommentServiceInternalCountCommentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalCountComment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalCountCommentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InternalCommentServiceInternalCountCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalCommentServiceInternalCountCommentArgs(%+v)", *p)
}

func (p *InternalCommentServiceInternalCountCommentArgs) DeepEqual(ano *InternalCommentServiceInternalCountCommentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *InternalCommentServiceInternalCountCommentArgs) Field1DeepEqual(src *InternalCountCommentRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type InternalCommentServiceInternalCountCommentResult struct {
	Success *InternalCountCommentResponse `thrift:"success,0,optional" frugal:"0,optional,InternalCountCommentResponse" json:"success,omitempty"`
}

func NewInternalCommentServiceInternalCountCommentResult() *InternalCommentServiceInternalCountCommentResult {
	return &InternalCommentServiceInternalCountCommentResult{}
}

func (p *InternalCommentServiceInternalCountCommentResult) InitDefault() {
	*p = InternalCommentServiceInternalCountCommentResult{}
}

var InternalCommentServiceInternalCountCommentResult_Success_DEFAULT *InternalCountCommentResponse

func (p *InternalCommentServiceInternalCountCommentResult) GetSuccess() (v *InternalCountCommentResponse) {
	if !p.IsSetSuccess() {
		return InternalCommentServiceInternalCountCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InternalCommentServiceInternalCountCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*InternalCountCommentResponse)
}

var fieldIDToName_InternalCommentServiceInternalCountCommentResult = map[int16]string{
	0: "success",
}

func (p *InternalCommentServiceInternalCountCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InternalCommentServiceInternalCountCommentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InternalCommentServiceInternalCountCommentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalCountCommentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewInternalCountCommentResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InternalCommentServiceInternalCountCommentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InternalCountComment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InternalCommentServiceInternalCountCommentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InternalCommentServiceInternalCountCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalCommentServiceInternalCountCommentResult(%+v)", *p)
}

func (p *InternalCommentServiceInternalCountCommentResult) DeepEqual(ano *InternalCommentServiceInternalCountCommentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InternalCommentServiceInternalCountCommentResult) Field0DeepEqual(src *InternalCountCommentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
