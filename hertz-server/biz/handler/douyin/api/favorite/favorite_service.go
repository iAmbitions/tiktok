// Code generated by hertz generator.

package favorite

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	client2 "github.com/cloudwego/kitex/client"
	api "tiktok/hertz-server/biz/model/douyin/api/favorite"
	feed2 "tiktok/hertz-server/biz/model/douyin/feed"
	user2 "tiktok/hertz-server/biz/model/douyin/user"
	"tiktok/hertz-server/kitex_gen/douyin/favorite"
	"tiktok/hertz-server/kitex_gen/douyin/favorite/internalfavoriteservice"
	feed1 "tiktok/hertz-server/kitex_gen/douyin/feed"
	user1 "tiktok/hertz-server/kitex_gen/douyin/user"
	"tiktok/mv/jwt"
)

func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavoriteRequest
	// Parameter binding and validation capabilities provided by hertz
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	client, err := internalfavoriteservice.NewClient("favorite", client2.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		panic(err)
	}
	loginInfo, err := jwt.Parse(req.Token)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	reqRpc := &favorite.InternalFavoriteRequest{
		ActorId:    loginInfo.UerID,
		VideoId:    req.VideoID,
		ActionType: req.ActionType,
	}
	respRpc, err := client.InternalFavoriteAction(ctx, reqRpc)
	if err != nil {
		panic(err)
	}

	if respRpc.StatusCode != 0 {
		resp := &api.FavoriteResponse{
			StatusCode: respRpc.StatusCode,
			StatusMsg:  respRpc.StatusMsg,
		}
		c.JSON(200, resp)
		return
	}
	resp := &api.FavoriteResponse{
		StatusCode: respRpc.StatusCode,
		StatusMsg:  respRpc.StatusMsg,
	}

	c.JSON(200, resp)
}
func convertUser(src *user1.User) *user2.User {
	return &user2.User{
		ID:              src.Id,
		Name:            src.Name,
		FollowCount:     src.FollowCount,
		FollowerCount:   src.FollowerCount,
		IsFollow:        src.IsFollow,
		Avatar:          src.Avatar,
		BackgroundImage: src.BackgroundImage,
		Signature:       src.Signature,
		TotalFavorited:  src.TotalFavorited,
		WorkCount:       src.WorkCount,
		FavoriteCount:   src.FavoriteCount,
	}
}

func convertVideo(src *feed1.Video) *feed2.Video {
	return &feed2.Video{
		ID:            src.Id,
		Author:        convertUser(src.Author), // 注意：这可能需要深拷贝或进一步的转换
		PlayURL:       src.PlayUrl,
		CoverURL:      src.CoverUrl,
		FavoriteCount: src.FavoriteCount,
		CommentCount:  src.CommentCount,
		IsFavorite:    src.IsFavorite,
		Title:         src.Title,
	}
}

func convertVideoList(src []*feed1.Video) []*feed2.Video {
	dest := make([]*feed2.Video, len(src))
	for i, v := range src {
		dest[i] = convertVideo(v)
	}
	return dest
}

func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	client, err := internalfavoriteservice.NewClient("favorite", client2.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		panic(err)
	}
	reqRpc := &favorite.InternalFavoriteListRequest{
		ActorId: 1,
		UserId:  req.UserID,
	}
	respRpc, err := client.InternalFavoriteList(ctx, reqRpc)

	if err != nil {
		panic(err)
	}
	if respRpc.StatusCode != 0 {
		resp := &api.FavoriteListResponse{
			StatusCode: respRpc.StatusCode,
			StatusMsg:  respRpc.StatusMsg,
			VideoList:  nil,
		}
		c.JSON(200, resp)
		return
	}
	resp := &api.FavoriteListResponse{
		StatusCode: respRpc.StatusCode,
		StatusMsg:  respRpc.StatusMsg,
		VideoList:  convertVideoList(respRpc.VideoList),
	}
	c.JSON(200, resp)
}
