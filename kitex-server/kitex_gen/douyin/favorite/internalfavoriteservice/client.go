// Code generated by Kitex v0.7.0. DO NOT EDIT.

package internalfavoriteservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	favorite "tiktok/kitex-server/kitex_gen/douyin/favorite"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	InternalFavoriteAction(ctx context.Context, request *favorite.InternalFavoriteRequest, callOptions ...callopt.Option) (r *favorite.InternalFavoriteResponse, err error)
	InternalFavoriteList(ctx context.Context, request *favorite.InternalFavoriteListRequest, callOptions ...callopt.Option) (r *favorite.InternalFavoriteListResponse, err error)
	InternalIsFavorite(ctx context.Context, request *favorite.InternalIsFavoriteRequest, callOptions ...callopt.Option) (r *favorite.InternalIsFavoriteResponse, err error)
	InternalCountFavorite(ctx context.Context, request *favorite.InternalCountFavoriteRequest, callOptions ...callopt.Option) (r *favorite.InternalCountFavoriteResponse, err error)
	InternalCountUserFavorite(ctx context.Context, request *favorite.InternalCountUserFavoriteRequest, callOptions ...callopt.Option) (r *favorite.InternalCountUserFavoriteResponse, err error)
	InternalCountUserTotalFavorited(ctx context.Context, request *favorite.InternalCountUserTotalFavoritedRequest, callOptions ...callopt.Option) (r *favorite.InternalCountUserTotalFavoritedResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kInternalFavoriteServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInternalFavoriteServiceClient struct {
	*kClient
}

func (p *kInternalFavoriteServiceClient) InternalFavoriteAction(ctx context.Context, request *favorite.InternalFavoriteRequest, callOptions ...callopt.Option) (r *favorite.InternalFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InternalFavoriteAction(ctx, request)
}

func (p *kInternalFavoriteServiceClient) InternalFavoriteList(ctx context.Context, request *favorite.InternalFavoriteListRequest, callOptions ...callopt.Option) (r *favorite.InternalFavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InternalFavoriteList(ctx, request)
}

func (p *kInternalFavoriteServiceClient) InternalIsFavorite(ctx context.Context, request *favorite.InternalIsFavoriteRequest, callOptions ...callopt.Option) (r *favorite.InternalIsFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InternalIsFavorite(ctx, request)
}

func (p *kInternalFavoriteServiceClient) InternalCountFavorite(ctx context.Context, request *favorite.InternalCountFavoriteRequest, callOptions ...callopt.Option) (r *favorite.InternalCountFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InternalCountFavorite(ctx, request)
}

func (p *kInternalFavoriteServiceClient) InternalCountUserFavorite(ctx context.Context, request *favorite.InternalCountUserFavoriteRequest, callOptions ...callopt.Option) (r *favorite.InternalCountUserFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InternalCountUserFavorite(ctx, request)
}

func (p *kInternalFavoriteServiceClient) InternalCountUserTotalFavorited(ctx context.Context, request *favorite.InternalCountUserTotalFavoritedRequest, callOptions ...callopt.Option) (r *favorite.InternalCountUserTotalFavoritedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InternalCountUserTotalFavorited(ctx, request)
}
