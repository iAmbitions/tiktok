// Code generated by Kitex v0.7.0. DO NOT EDIT.

package internalfavoriteservice

import (
			"context"
				client "github.com/cloudwego/kitex/client"
				kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
				favorite "tiktok/kitex-server/kitex_gen/douyin/favorite"
)

func serviceInfo() *kitex.ServiceInfo {
	return internalFavoriteServiceServiceInfo
 }

var internalFavoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InternalFavoriteService"
	handlerType := (*favorite.InternalFavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"InternalFavoriteAction":
			kitex.NewMethodInfo(internalFavoriteActionHandler, newInternalFavoriteServiceInternalFavoriteActionArgs, newInternalFavoriteServiceInternalFavoriteActionResult, false),
		"InternalFavoriteList":
			kitex.NewMethodInfo(internalFavoriteListHandler, newInternalFavoriteServiceInternalFavoriteListArgs, newInternalFavoriteServiceInternalFavoriteListResult, false),
		"InternalIsFavorite":
			kitex.NewMethodInfo(internalIsFavoriteHandler, newInternalFavoriteServiceInternalIsFavoriteArgs, newInternalFavoriteServiceInternalIsFavoriteResult, false),
		"InternalCountFavorite":
			kitex.NewMethodInfo(internalCountFavoriteHandler, newInternalFavoriteServiceInternalCountFavoriteArgs, newInternalFavoriteServiceInternalCountFavoriteResult, false),
		"InternalCountUserFavorite":
			kitex.NewMethodInfo(internalCountUserFavoriteHandler, newInternalFavoriteServiceInternalCountUserFavoriteArgs, newInternalFavoriteServiceInternalCountUserFavoriteResult, false),
		"InternalCountUserTotalFavorited":
			kitex.NewMethodInfo(internalCountUserTotalFavoritedHandler, newInternalFavoriteServiceInternalCountUserTotalFavoritedArgs, newInternalFavoriteServiceInternalCountUserTotalFavoritedResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":	 "favorite",
		"ServiceFilePath": "../IDL/favorite.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName: 	 serviceName,
		HandlerType: 	 handlerType,
		Methods:     	 methods,
		PayloadCodec:  	 kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}



func internalFavoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*favorite.InternalFavoriteServiceInternalFavoriteActionArgs)
	realResult := result.(*favorite.InternalFavoriteServiceInternalFavoriteActionResult)
	success, err := handler.(favorite.InternalFavoriteService).InternalFavoriteAction(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newInternalFavoriteServiceInternalFavoriteActionArgs() interface{} {
	return favorite.NewInternalFavoriteServiceInternalFavoriteActionArgs()
}

func newInternalFavoriteServiceInternalFavoriteActionResult() interface{} {
	return favorite.NewInternalFavoriteServiceInternalFavoriteActionResult()
}


func internalFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*favorite.InternalFavoriteServiceInternalFavoriteListArgs)
	realResult := result.(*favorite.InternalFavoriteServiceInternalFavoriteListResult)
	success, err := handler.(favorite.InternalFavoriteService).InternalFavoriteList(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newInternalFavoriteServiceInternalFavoriteListArgs() interface{} {
	return favorite.NewInternalFavoriteServiceInternalFavoriteListArgs()
}

func newInternalFavoriteServiceInternalFavoriteListResult() interface{} {
	return favorite.NewInternalFavoriteServiceInternalFavoriteListResult()
}


func internalIsFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*favorite.InternalFavoriteServiceInternalIsFavoriteArgs)
	realResult := result.(*favorite.InternalFavoriteServiceInternalIsFavoriteResult)
	success, err := handler.(favorite.InternalFavoriteService).InternalIsFavorite(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newInternalFavoriteServiceInternalIsFavoriteArgs() interface{} {
	return favorite.NewInternalFavoriteServiceInternalIsFavoriteArgs()
}

func newInternalFavoriteServiceInternalIsFavoriteResult() interface{} {
	return favorite.NewInternalFavoriteServiceInternalIsFavoriteResult()
}


func internalCountFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*favorite.InternalFavoriteServiceInternalCountFavoriteArgs)
	realResult := result.(*favorite.InternalFavoriteServiceInternalCountFavoriteResult)
	success, err := handler.(favorite.InternalFavoriteService).InternalCountFavorite(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newInternalFavoriteServiceInternalCountFavoriteArgs() interface{} {
	return favorite.NewInternalFavoriteServiceInternalCountFavoriteArgs()
}

func newInternalFavoriteServiceInternalCountFavoriteResult() interface{} {
	return favorite.NewInternalFavoriteServiceInternalCountFavoriteResult()
}


func internalCountUserFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*favorite.InternalFavoriteServiceInternalCountUserFavoriteArgs)
	realResult := result.(*favorite.InternalFavoriteServiceInternalCountUserFavoriteResult)
	success, err := handler.(favorite.InternalFavoriteService).InternalCountUserFavorite(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newInternalFavoriteServiceInternalCountUserFavoriteArgs() interface{} {
	return favorite.NewInternalFavoriteServiceInternalCountUserFavoriteArgs()
}

func newInternalFavoriteServiceInternalCountUserFavoriteResult() interface{} {
	return favorite.NewInternalFavoriteServiceInternalCountUserFavoriteResult()
}


func internalCountUserTotalFavoritedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*favorite.InternalFavoriteServiceInternalCountUserTotalFavoritedArgs)
	realResult := result.(*favorite.InternalFavoriteServiceInternalCountUserTotalFavoritedResult)
	success, err := handler.(favorite.InternalFavoriteService).InternalCountUserTotalFavorited(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newInternalFavoriteServiceInternalCountUserTotalFavoritedArgs() interface{} {
	return favorite.NewInternalFavoriteServiceInternalCountUserTotalFavoritedArgs()
}

func newInternalFavoriteServiceInternalCountUserTotalFavoritedResult() interface{} {
	return favorite.NewInternalFavoriteServiceInternalCountUserTotalFavoritedResult()
}


type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}


func (p *kClient) InternalFavoriteAction(ctx context.Context , request *favorite.InternalFavoriteRequest) (r *favorite.InternalFavoriteResponse, err error) {
	var _args favorite.InternalFavoriteServiceInternalFavoriteActionArgs
	_args.Request = request
	var _result favorite.InternalFavoriteServiceInternalFavoriteActionResult
	if err = p.c.Call(ctx, "InternalFavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InternalFavoriteList(ctx context.Context , request *favorite.InternalFavoriteListRequest) (r *favorite.InternalFavoriteListResponse, err error) {
	var _args favorite.InternalFavoriteServiceInternalFavoriteListArgs
	_args.Request = request
	var _result favorite.InternalFavoriteServiceInternalFavoriteListResult
	if err = p.c.Call(ctx, "InternalFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InternalIsFavorite(ctx context.Context , request *favorite.InternalIsFavoriteRequest) (r *favorite.InternalIsFavoriteResponse, err error) {
	var _args favorite.InternalFavoriteServiceInternalIsFavoriteArgs
	_args.Request = request
	var _result favorite.InternalFavoriteServiceInternalIsFavoriteResult
	if err = p.c.Call(ctx, "InternalIsFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InternalCountFavorite(ctx context.Context , request *favorite.InternalCountFavoriteRequest) (r *favorite.InternalCountFavoriteResponse, err error) {
	var _args favorite.InternalFavoriteServiceInternalCountFavoriteArgs
	_args.Request = request
	var _result favorite.InternalFavoriteServiceInternalCountFavoriteResult
	if err = p.c.Call(ctx, "InternalCountFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InternalCountUserFavorite(ctx context.Context , request *favorite.InternalCountUserFavoriteRequest) (r *favorite.InternalCountUserFavoriteResponse, err error) {
	var _args favorite.InternalFavoriteServiceInternalCountUserFavoriteArgs
	_args.Request = request
	var _result favorite.InternalFavoriteServiceInternalCountUserFavoriteResult
	if err = p.c.Call(ctx, "InternalCountUserFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InternalCountUserTotalFavorited(ctx context.Context , request *favorite.InternalCountUserTotalFavoritedRequest) (r *favorite.InternalCountUserTotalFavoritedResponse, err error) {
	var _args favorite.InternalFavoriteServiceInternalCountUserTotalFavoritedArgs
	_args.Request = request
	var _result favorite.InternalFavoriteServiceInternalCountUserTotalFavoritedResult
	if err = p.c.Call(ctx, "InternalCountUserTotalFavorited", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

