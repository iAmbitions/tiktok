// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"simple-douyin-backend/dal/db/dao"
)

func newUserDetail(db *gorm.DB, opts ...gen.DOOption) userDetail {
	_userDetail := userDetail{}

	_userDetail.userDetailDo.UseDB(db, opts...)
	_userDetail.userDetailDo.UseModel(&dao.UserDetail{})

	tableName := _userDetail.userDetailDo.TableName()
	_userDetail.ALL = field.NewAsterisk(tableName)
	_userDetail.ID = field.NewUint(tableName, "id")
	_userDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_userDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userDetail.DeletedAt = field.NewField(tableName, "deleted_at")
	_userDetail.UserID = field.NewInt64(tableName, "user_id")
	_userDetail.Name = field.NewString(tableName, "name")
	_userDetail.FollowCount = field.NewInt64(tableName, "follow_count")
	_userDetail.FollowerCount = field.NewInt64(tableName, "follower_count")
	_userDetail.Avatar = field.NewString(tableName, "avatar")
	_userDetail.BackgroundImage = field.NewString(tableName, "background_image")
	_userDetail.Signature = field.NewString(tableName, "signature")
	_userDetail.TotalFavorited = field.NewInt64(tableName, "total_favorited")
	_userDetail.WorkCount = field.NewInt64(tableName, "work_count")
	_userDetail.FavoriteCount = field.NewInt64(tableName, "favorite_count")

	_userDetail.fillFieldMap()

	return _userDetail
}

type userDetail struct {
	userDetailDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	UserID          field.Int64
	Name            field.String
	FollowCount     field.Int64
	FollowerCount   field.Int64
	Avatar          field.String
	BackgroundImage field.String
	Signature       field.String
	TotalFavorited  field.Int64
	WorkCount       field.Int64
	FavoriteCount   field.Int64

	fieldMap map[string]field.Expr
}

func (u userDetail) Table(newTableName string) *userDetail {
	u.userDetailDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDetail) As(alias string) *userDetail {
	u.userDetailDo.DO = *(u.userDetailDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDetail) updateTableName(table string) *userDetail {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.Name = field.NewString(table, "name")
	u.FollowCount = field.NewInt64(table, "follow_count")
	u.FollowerCount = field.NewInt64(table, "follower_count")
	u.Avatar = field.NewString(table, "avatar")
	u.BackgroundImage = field.NewString(table, "background_image")
	u.Signature = field.NewString(table, "signature")
	u.TotalFavorited = field.NewInt64(table, "total_favorited")
	u.WorkCount = field.NewInt64(table, "work_count")
	u.FavoriteCount = field.NewInt64(table, "favorite_count")

	u.fillFieldMap()

	return u
}

func (u *userDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDetail) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["name"] = u.Name
	u.fieldMap["follow_count"] = u.FollowCount
	u.fieldMap["follower_count"] = u.FollowerCount
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["background_image"] = u.BackgroundImage
	u.fieldMap["signature"] = u.Signature
	u.fieldMap["total_favorited"] = u.TotalFavorited
	u.fieldMap["work_count"] = u.WorkCount
	u.fieldMap["favorite_count"] = u.FavoriteCount
}

func (u userDetail) clone(db *gorm.DB) userDetail {
	u.userDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDetail) replaceDB(db *gorm.DB) userDetail {
	u.userDetailDo.ReplaceDB(db)
	return u
}

type userDetailDo struct{ gen.DO }

type IUserDetailDo interface {
	gen.SubQuery
	Debug() IUserDetailDo
	WithContext(ctx context.Context) IUserDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDetailDo
	WriteDB() IUserDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDetailDo
	Not(conds ...gen.Condition) IUserDetailDo
	Or(conds ...gen.Condition) IUserDetailDo
	Select(conds ...field.Expr) IUserDetailDo
	Where(conds ...gen.Condition) IUserDetailDo
	Order(conds ...field.Expr) IUserDetailDo
	Distinct(cols ...field.Expr) IUserDetailDo
	Omit(cols ...field.Expr) IUserDetailDo
	Join(table schema.Tabler, on ...field.Expr) IUserDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDetailDo
	Group(cols ...field.Expr) IUserDetailDo
	Having(conds ...gen.Condition) IUserDetailDo
	Limit(limit int) IUserDetailDo
	Offset(offset int) IUserDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDetailDo
	Unscoped() IUserDetailDo
	Create(values ...*dao.UserDetail) error
	CreateInBatches(values []*dao.UserDetail, batchSize int) error
	Save(values ...*dao.UserDetail) error
	First() (*dao.UserDetail, error)
	Take() (*dao.UserDetail, error)
	Last() (*dao.UserDetail, error)
	Find() ([]*dao.UserDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.UserDetail, err error)
	FindInBatches(result *[]*dao.UserDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dao.UserDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDetailDo
	Assign(attrs ...field.AssignExpr) IUserDetailDo
	Joins(fields ...field.RelationField) IUserDetailDo
	Preload(fields ...field.RelationField) IUserDetailDo
	FirstOrInit() (*dao.UserDetail, error)
	FirstOrCreate() (*dao.UserDetail, error)
	FindByPage(offset int, limit int) (result []*dao.UserDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDetailDo) Debug() IUserDetailDo {
	return u.withDO(u.DO.Debug())
}

func (u userDetailDo) WithContext(ctx context.Context) IUserDetailDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDetailDo) ReadDB() IUserDetailDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDetailDo) WriteDB() IUserDetailDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDetailDo) Session(config *gorm.Session) IUserDetailDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDetailDo) Clauses(conds ...clause.Expression) IUserDetailDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDetailDo) Returning(value interface{}, columns ...string) IUserDetailDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDetailDo) Not(conds ...gen.Condition) IUserDetailDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDetailDo) Or(conds ...gen.Condition) IUserDetailDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDetailDo) Select(conds ...field.Expr) IUserDetailDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDetailDo) Where(conds ...gen.Condition) IUserDetailDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDetailDo) Order(conds ...field.Expr) IUserDetailDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDetailDo) Distinct(cols ...field.Expr) IUserDetailDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDetailDo) Omit(cols ...field.Expr) IUserDetailDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDetailDo) Join(table schema.Tabler, on ...field.Expr) IUserDetailDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDetailDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDetailDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDetailDo) Group(cols ...field.Expr) IUserDetailDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDetailDo) Having(conds ...gen.Condition) IUserDetailDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDetailDo) Limit(limit int) IUserDetailDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDetailDo) Offset(offset int) IUserDetailDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDetailDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDetailDo) Unscoped() IUserDetailDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDetailDo) Create(values ...*dao.UserDetail) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDetailDo) CreateInBatches(values []*dao.UserDetail, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDetailDo) Save(values ...*dao.UserDetail) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDetailDo) First() (*dao.UserDetail, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.UserDetail), nil
	}
}

func (u userDetailDo) Take() (*dao.UserDetail, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.UserDetail), nil
	}
}

func (u userDetailDo) Last() (*dao.UserDetail, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.UserDetail), nil
	}
}

func (u userDetailDo) Find() ([]*dao.UserDetail, error) {
	result, err := u.DO.Find()
	return result.([]*dao.UserDetail), err
}

func (u userDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.UserDetail, err error) {
	buf := make([]*dao.UserDetail, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDetailDo) FindInBatches(result *[]*dao.UserDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDetailDo) Attrs(attrs ...field.AssignExpr) IUserDetailDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDetailDo) Assign(attrs ...field.AssignExpr) IUserDetailDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDetailDo) Joins(fields ...field.RelationField) IUserDetailDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDetailDo) Preload(fields ...field.RelationField) IUserDetailDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDetailDo) FirstOrInit() (*dao.UserDetail, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.UserDetail), nil
	}
}

func (u userDetailDo) FirstOrCreate() (*dao.UserDetail, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.UserDetail), nil
	}
}

func (u userDetailDo) FindByPage(offset int, limit int) (result []*dao.UserDetail, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDetailDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDetailDo) Delete(models ...*dao.UserDetail) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDetailDo) withDO(do gen.Dao) *userDetailDo {
	u.DO = *do.(*gen.DO)
	return u
}
